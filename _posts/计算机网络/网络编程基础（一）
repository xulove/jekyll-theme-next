互联网模型
	协议：每一层都是为了完成一类功能。为了实现整体的功能，大家都遵守共同的规则，这就是协议。
实体层
	把电脑连接起来的物理手段。光缆、电缆、无线电波等。作用：负责传送0和1信号
---------------------
链接层
	单纯的0和1没有意思，我们需要规定它的解读方式。链接层确定了0和1的分组方式
	以太网协议：
		一组电信号构成一个数据包，每一帧纷呈两个部分：标头head和数据data
	MAC地址：
		以太网规定，进入网络的所有设备都必须具有MAC接口。标头head中数据包的发送地址和接受地址，就是MAC地址
		每块网卡出口的时候，都具有全球唯一的MAC地址。可以定位网卡和数据包
	广播：
		计算机自己判断数据自己是否要接收
--------------------
网络层
由来：
	同一个子网络中MAC地址地址用广播传输，不同子网络中就要用路由了。
	怎么区分是不是同一个子网络？MAC地址本身做不到，这就引入了“网络层”的诞生。
	网络层引入了一套新的地址，这套地址就叫做“网络地址”，简称“网址”

	通过网址确定子网咯，通过MAC确定目标网卡。简单来说是可以完成了。
IP协议：
	规定我们上面所说的网络地址的协议。
	0.0.0.0-255.255.255.255
	子网掩码：判断两台计算机是否同属于一个子网络
	IP数据包：
		IP数据包直接放进以太网数据包的“数据”部分。这也体会到了互联网分层结构的好处：上层结构的变动完全不涉及下层的结构。
	ARP协议：
		大部分情况下，我们并不知道对方的MAC地址。所以我们需要有一种机制，能够从IP地址得到MAC地址。有了ARP协议，我们就可以得到同一个子网络内所有主机的MAC地址。	
--------------------
传输层
	同一台计算机所有的程序都需要用到网络。一个数据包从网络上发送过来了，我们不知道这是QQ的，还是微信的。我们还需要一个参数，确定数据包到底是给那个程序的。
	这个参数就叫做端口（port）

	传输层：端口到端口
	网络层：主机到主机
		所以只要确定了主机和端口，我们就可以进行程序间的交流。因此，Unix系统把：主机+端口 叫做套接字。
	
	现在我们必须在数据包中加入端口信息了，就需要新的协议：最简单的就是UDP协议。
	
	除了UDP还有TCP协议
--------------------
应用层
	作用:规定引用程序的数据格式。
	这就必须要有不同的协议再规定电子邮件、网页、FTP的数据的格式。
